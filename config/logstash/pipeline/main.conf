input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json
  }
  
  # Syslog input for system logs
  syslog {
    port => 5140
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    
    # Detect potential security issues
    if [syslog_message] =~ /failed|failure|invalid|error|denied|unauthorized|blocked/ {
      mutate {
        add_tag => ["security_alert"]
      }
      
      # Classify the alert severity
      if [syslog_message] =~ /root|sudo|admin|password|auth|ssh|firewall/ {
        mutate {
          add_field => { "alert_severity" => "high" }
        }
      } else {
        mutate {
          add_field => { "alert_severity" => "medium" }
        }
      }
    }
    
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }

  # Process authentication logs
  if [type] == "auth" or [source] =~ /auth\.log/ {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:auth_timestamp} %{SYSLOGHOST:auth_hostname} %{DATA:auth_program}(?:\[%{POSINT:auth_pid}\])?: %{GREEDYDATA:auth_message}" }
    }
    
    # Detect failed login attempts
    if [auth_message] =~ /Failed password|authentication failure|invalid user|Connection closed by|Failed login/ {
      mutate {
        add_tag => ["failed_login"]
        add_field => { "alert_severity" => "high" }
      }
    }
    
    # Detect successful logins
    if [auth_message] =~ /Accepted password|session opened/ {
      mutate {
        add_tag => ["successful_login"]
      }
    }
    
    # Detect brute force attempts (threshold handled in Wazuh)
    if "failed_login" in [tags] {
      mutate {
        add_tag => ["possible_brute_force"]
      }
    }
  }
  
  # Process web server logs
  if [type] == "nginx" or [type] == "apache" {
    # Detect common web attacks
    if [message] =~ /\b(select|union|insert|update|delete|drop)\b.*\b(from|into|table|database)\b/i or 
       [message] =~ /<script>|javascript:|eval\(|onload=|onclick=|onerror=/ or
       [message] =~ /\/etc\/passwd|\/bin\/bash|\.\.\/\.\.\/|cmd\.exe|command\.com/ {
      mutate {
        add_tag => ["web_attack"]
        add_field => { "alert_severity" => "critical" }
        add_field => { "attack_type" => "Possible injection or path traversal" }
      }
    }
    
    # Detect unusual HTTP status codes
    if [status] =~ /4\d\d/ {
      if [status] == "403" {
        mutate {
          add_tag => ["access_denied"]
          add_field => { "alert_severity" => "medium" }
        }
      }
      if [status] == "401" {
        mutate {
          add_tag => ["authentication_failed"]
          add_field => { "alert_severity" => "medium" }
        }
      }
      if [status] == "404" and [request] =~ /\.(php|asp|aspx|jsp|cgi)/ {
        # Possible vulnerability scanning
        mutate {
          add_tag => ["possible_scan"]
          add_field => { "alert_severity" => "low" }
        }
      }
    }
  }
  
  # Enrich events with geo data where applicable
  if [client_ip] or [src_ip] {
    # Use client_ip or fallback to src_ip
    mutate {
      add_field => { "ip_for_geo" => "%{[client_ip]}" }
    }
    if ![client_ip] and [src_ip] {
      mutate {
        add_field => { "ip_for_geo" => "%{[src_ip]}" }
      }
    }
    
    geoip {
      source => "ip_for_geo"
      target => "geoip"
    }
  }
}

output {
  # Send all events to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "securiwatch-%{+YYYY.MM.dd}"
    template_name => "securiwatch"
  }
  
  # Send security alerts to a separate index
  if "security_alert" in [tags] or "failed_login" in [tags] or "web_attack" in [tags] or "possible_scan" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "security-alerts-%{+YYYY.MM.dd}"
    }
    
    # Optional: send critical alerts to a webhook or email service
    if [alert_severity] == "critical" or [alert_severity] == "high" {
      http {
        url => "http://alerter:8080/alert"
        http_method => "post"
        content_type => "application/json"
        format => "json"
        mapping => {
          "severity" => "%{alert_severity}"
          "message" => "%{message}"
          "source" => "%{host}"
          "timestamp" => "%{@timestamp}"
          "event_type" => "%{tags}"
        }
      }
    }
  }
} 